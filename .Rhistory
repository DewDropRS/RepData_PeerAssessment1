pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(split = drv,y = hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", col = manufacturer)
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
2
swirl()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtile("Swirl Rules!")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = .5)
g + geom_point(size = 4, alpha = .5, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = .5) + geom_smooth(size =4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy, type = "l", ylim=c(-3,3))
g <- ggplot(data=testdat, aes(x=myx,y=myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color =factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se = FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se = FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill =cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data =diamonds)
qplot(carat, price, data =diamonds, shape = cut)
qplot(carat, price, data =diamonds, color = cut)
qplot(carat, price, data =diamonds, color = cut, geom_smooth("lm"))
qplot(carat, price, data =diamonds, color = cut, geom_smooth(method="lm"))
qplot(carat, price, data =diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data =diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data =diamonds, color = cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4),na.rm = TRUE )
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size=3, color="pink")
ggplot(diamonds,aes("carat", "price")) + geom_boxplot() + facet_grid(.~cut)
ggplot(diamonds,aes(carat, price)) + geom_boxplot() + facet_grid(.~cut)
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("add.Patt.R", local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u %*% (svd1$d[1]) * svd1$v[,1]
a1 <- (svd1$u[,1] %*% svd1$d[1]) * svd1$v[,1]
a1 <- (svd1$u[,1] %*% svd1$d[1]) * svd1$v[,1]
a1 <- svd1$u[,1] %*% svd1$d[1] * svd1$v[,1]
a1 <- svd1$u[,1] %*% (svd1$d[1] * svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2])) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]) )
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]) )
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd$subject = 1)
sub1 <- subset(ssd$subject == 1)
sub1 <- subset(ssd[,ssd$subject ==1])
sub1 <- subset(ssd, subject ==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub[,10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(563,562)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10,11,12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmean(sub1[,-c(562:563)],centers = 6)
kClust <- kmeans(sub1[,-c(562:563)],centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)],centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kclust$centers)
dim(kclust)
dim(kClust)
dim(kClust$cneters)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
names(cnames)
cnames
cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <-pm0[,pm0$Sample.Value]
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x<0
negative <- x1<0
sum(negative, na.rm=TRUE)
MEAN(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- date(x1$pm1)
dates <- Date(x1$pm1)
dates <- date(pm1$Date)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(lwd=2, median(x0sub, na.rm = TRUE))
abline(lwd=2, median(x0sub, na.rm = TRUE))
abline(median(x0sub, na.rm = TRUE), lwd = 2)
abline(h=median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2],rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
swirl()
swirl()
swirl()
swirl()
---
library(dplyr)
library(ggplot2)
library(knitr)
library(lubridate)
setwd("~/coursera/ReproducibleResearch/RepData_PeerAssessment1")
getwd()
activitydata <- read.table("./activity.csv", sep=",", header=TRUE)
activity_complete <- activitydata[complete.cases(activitydata),]
head(activity_complete)
totStepsPerDay <- activity_complete %>% group_by(date) %>%
summarise(steps=sum(steps, na.rm=TRUE))
steps_mean <- summarise(totStepsPerDay, steps_avg = mean(steps))
ggplot(data = totStepsPerDay, aes(x = steps, color = date)) +
geom_histogram(stat = "bin") +
geom_vline(data=steps_mean, aes(xintercept=steps_avg),
linetype="dashed", size=1)
summary(totStepsPerDay)
StepsPerIntervalAvg <- activity_complete %>% group_by(interval) %>%
summarise(steps_avg=mean(steps, na.rm=TRUE))
max_steps <- StepsPerIntervalAvg %>%
filter(steps_avg == max(steps_avg)) %>%
arrange(interval)
plot(StepsPerIntervalAvg$interval, StepsPerIntervalAvg$steps_avg, xlab = "Interval (min.)", ylab = "Average Steps", xaxt = "n", type = "l")
axis(1, StepsPerIntervalAvg$interval, cex.axis = .45)
abline(v=max_steps$interval, col="blue")
max_steps
sum(is.na(activitydata$steps))
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
View(narows)
View(AvgStepsWkdy)
View(AvgStepsWkdy)
# Chunk 1
library(dplyr)
library(ggplot2)
library(knitr)
library(lubridate)
# Chunk 2
setwd("~/coursera/ReproducibleResearch/RepData_PeerAssessment1")
getwd()
# Chunk 3
activitydata <- read.table("./activity.csv", sep=",", header=TRUE)
activity_complete <- activitydata[complete.cases(activitydata),]
head(activity_complete)
# Chunk 4
totStepsPerDay <- activity_complete %>% group_by(date) %>%
summarise(steps=sum(steps, na.rm=TRUE))
steps_mean <- summarise(totStepsPerDay, steps_avg = mean(steps))
ggplot(data = totStepsPerDay, aes(x = steps, color = date)) +
geom_histogram(stat = "bin") +
geom_vline(data=steps_mean, aes(xintercept=steps_avg),
linetype="dashed", size=1)
summary(totStepsPerDay)
# Chunk 5
StepsPerIntervalAvg <- activity_complete %>% group_by(interval) %>%
summarise(steps_avg=mean(steps, na.rm=TRUE))
max_steps <- StepsPerIntervalAvg %>%
filter(steps_avg == max(steps_avg)) %>%
arrange(interval)
plot(StepsPerIntervalAvg$interval, StepsPerIntervalAvg$steps_avg, xlab = "Interval (min.)", ylab = "Average Steps", xaxt = "n", type = "l")
axis(1, StepsPerIntervalAvg$interval, cex.axis = .45)
abline(v=max_steps$interval, col="blue")
# Chunk 6
max_steps
# Chunk 7
sum(is.na(activitydata$steps))
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates <- narows %>% distinct(date)
View(na_distinct_dates)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates <- narows %>% select(date) %>% distinct(date)
View(na_distinct_dates)
View(na_distinct_dates)
View(na_distinct_dates)
merged <- merge(na_distinct_dates, AvgStepsWkdy, by= NULL)
View(merged)
View(merged)
na_distinct_dates_wkdy <- narows %>% select(date) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% select(date) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
imputed_wkdy <- merge(na_distinct_dates, AvgStepsWkdy, by= NULL)
View(na_distinct_dates)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% select(date, weekday) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
imputed_wkdy <- merge(na_distinct_dates, AvgStepsWkdy, by= NULL)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% select(date, weekdy) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
imputed_wkdy <- merge(na_distinct_dates, AvgStepsWkdy, by= NULL)
View(na_distinct_dates_wkdy)
View(imputed_wkdy)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% select(date, weekdy) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
imputed_wkdy <- merge(na_distinct_dates_wkdy, AvgStepsWkdy, by= NULL)
na_distinct_dates_wkend <- narows %>% select(date, weekdy) %>% distinct(date) %>% filter(weekdy  %in% weekend)
imputed_wkend <- merge(na_distinct_dates_wkend, AvgStepsWkend, by= NULL)
View(imputed_wkdy)
View(imputed_wkend)
View(activity_complete)
activity_imputed <- rbind(activity_complete, imputed_wkdy,imputed_wkend)
View(activity_complete)
View(imputed_wkdy)
View(imputed_wkdy)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% select(date) %>% distinct(date) %>% filter(weekdy  %in% weekdays)
imputed_wkdy <- merge(na_distinct_dates_wkdy, AvgStepsWkdy, by= NULL)
na_distinct_dates_wkend <- narows %>% select(date) %>% distinct(date) %>% filter(weekdy  %in% weekend)
imputed_wkend <- merge(na_distinct_dates_wkend, AvgStepsWkend, by= NULL)
activitydata_wk <- activitydata %>% mutate(weekdy = weekdays(as_date(date)))
narows<-subset(activitydata_wk, is.na(activitydata_wk$steps))
#get average steps grouped by interval for weekdays
#get average steps grouped by interval for weekends
#use these values to inpute missing days
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
AvgStepsWkdy <- activitydata_wk %>% filter(weekdy  %in% weekdays) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
weekend <- c("Saturday", "Sunday")
AvgStepsWkend <- activitydata_wk %>% filter(weekdy  %in% weekend) %>% group_by(interval) %>%
summarise(steps=mean(steps,na.rm=TRUE))
na_distinct_dates_wkdy <- narows %>% filter(weekdy  %in% weekdays) %>% select(date) %>% distinct(date)
imputed_wkdy <- merge(na_distinct_dates_wkdy, AvgStepsWkdy, by= NULL)
na_distinct_dates_wkend <- narows %>% filter(weekdy  %in% weekend) %>% select(date) %>% distinct(date)
imputed_wkend <- merge(na_distinct_dates_wkend, AvgStepsWkend, by= NULL)
activity_imputed <- rbind(activity_complete, imputed_wkdy,imputed_wkend)
View(activity_imputed)
activity_imputed <- rbind(activity_complete, imputed_wkdy,imputed_wkend)
activity_imputed <- activity_imputed %>% arrange(date, interval)
View(activity_imputed)
View(narows)
View(activity_imputed)
activity_imputed <- activity_imputed %>% mutate(weekdy = weekdays(as_date(date)))
View(activity_imputed)
View(activity_imputed)
View(activity_imputed)
totStepsPerDay_imp <- activity_imputed %>% group_by(date) %>%
summarise(steps=sum(steps, na.rm=TRUE))
steps_mean_imp <- summarise(totStepsPerDay_imp, steps_avg = mean(steps))
ggplot(data = totStepsPerDay_imp, aes(x = steps, color = date)) +
geom_histogram(stat = "bin") +
geom_vline(data=steps_mean_imp, aes(xintercept=steps_avg),
linetype="dashed", size=1)
summary(totStepsPerDay_imp)
activity_imputed <- activity_imputed %>% mutate(if(weekdy %in% weekend) {day = "weekend"})
weekend <- c("Saturday", "Sunday")
activity_imputed <- activity_imputed %>% mutate(if(weekdy %in% weekend) {day = "weekend"})
View(activity_imputed)
weekend <- c("Saturday", "Sunday")
activity_imputed <- activity_imputed %>% mutate(day = ifelse(weekdy %in% weekend,"weekend"))
View(activity_imputed)
weekend <- c("Saturday", "Sunday")
activity_imputed <- activity_imputed %>% mutate(day = ifelse(weekdy %in% weekend,"weekend", "weekday"))
View(activity_imputed)
weekend <- c("Saturday", "Sunday")
activity_imputed <- activity_imputed %>% mutate(day = as.factor(ifelse(weekdy %in% weekend,"weekend", "weekday")))
View(activity_imputed)
ggplot(data=activity_imputed, aes(x = interval, y = steps))) + facet.grid(.~type)
ggplot(data=activity_imputed, aes(x = interval, y = steps)) + facet.grid(.~type)
ggplot(data=activity_imputed, aes(x = interval, y = steps)) + facet_grid(.~type)
ggplot(data=activity_imputed, aes(x = interval, y = steps)) + facet_grid(.~type)
ggplot(data=activity_imputed, aes(x = interval, y = steps)) + facet_grid(.~type) + geom_line(aes(x = interval, y = steps))
ggplot(data=activity_imputed, aes(x = interval, y = steps)) + geom_line(aes(x = interval, y = steps))
ggplot(data=activity_imputed) + geom_line(aes(x = interval, y = steps))
ggplot(data=activity_imputed) + geom_line(aes(x = interval, y = steps, group = day))
ggplot(data=activity_imputed) + geom_line(aes(x = interval, y = steps, group = day), color = day)
ggplot(data=activity_imputed) + geom_line(aes(x = interval, y = steps), color = day)
ggplot(activity_imputed) + geom_line(aes(x = interval, y = steps), color = day)
ggplot(activity_imputed) + geom_line(aes(x = interval, y = steps), color = day)
ggplot(activity_imputed) + geom_line(aes(x = interval, y = steps, color = day))
ggplot(activity_imputed) + facet_grid(day ~.)  + geom_line(aes(x = interval, y = steps, color = day))
StepsPerIntervalAvg_imp <- activity_imputed %>% group_by(interval,day) %>%
summarise(steps_avg=mean(steps, na.rm=TRUE))
ggplot(activity_imputed) + facet_grid(day ~ .)  + geom_line(aes(x = interval, y = steps, color = day))
View(StepsPerIntervalAvg_imp)
StepsPerIntervalAvg_imp <- activity_imputed %>% group_by(interval,day) %>%
summarise(steps=mean(steps, na.rm=TRUE))
ggplot(activity_imputed) + facet_grid(day ~ .)  + geom_line(aes(x = interval, y = steps, color = day))
View(StepsPerIntervalAvg_imp)
StepsPerIntervalAvg_imp <- activity_imputed %>% group_by(interval,day) %>%
summarise(steps=mean(steps, na.rm=TRUE))
ggplot(StepsPerIntervalAvg_imp) + facet_grid(day ~ .)  + geom_line(aes(x = interval, y = steps, color = day))
